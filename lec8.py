'''
git add . # to check the new files 
git commit -m "Adding files"  # to seen all the files from summer-regex
git push # all files will uploaded  in the github

import numpy as np
import pandas as pd

df = pd.read_csv("D:\\summer-regex\\supply_chain.csv")
print(df.head())

pip install plotly

pip install statsmodels

import numpy as np
import pandas as pd

import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
pio.templates.default = "plotly_white"
df = pd.read_csv("D:\\summer-regex\\supply_chain.csv")
df.describe()
fig = px.scatter(df,x='price', y='Revenue generated', color='Product type', hover_data=['Number of products sold'], trendline = 'ols')
fig.show()
sales_data = df.groupby('Product type')['Number of products sold'].sum().reset_index()
pie_chart = px.pie(sales_data, values='Number of products sold', names='Product type', title='Sales by product Type', hover_data=['Number of products sold'], hole=0.5, color_distance_sequence=px.color.qualitative.pastel)
pie_chart.update_traces(textposition='inside', textinfo='parcent+label')
pie_chart.show()


import numpy as np
import pandas as pd

import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go

pio.templates.default = "plotly_white"

df = pd.read_csv("D:\\summer-regex\\supply_chain.csv")

print(df.describe())

fig = px.scatter(
    df,
    x='Price',  
    y='Revenue generated',
    color='Product type',
    hover_data=['Number of products sold'],
    trendline='ols'
)
fig.show()

sales_data = df.groupby('Product type')['Number of products sold'].sum().reset_index()

pie_chart = px.pie(
    sales_data,
    values='Number of products sold',
    names='Product type',
    title='Sales by Product Type',
    hole=0.5,
    color_discrete_sequence=px.colors.qualitative.Pastel
)

pie_chart.update_traces(
    textposition='inside',
    textinfo='percent+label'  
)

pie_chart.show()
total_revenue = df.groupby('Shipping carriers')['Revenue generated'].sum().reset_index()
fix=go.Figure()
fig.add_trace(go.Bar(x=total_revenue['Shipping carriers'],
                     y=total_revenue['Revenue generated']))
fig.update_layout(title='Total Revenue by Shipping carriers',
                  xaxis_title='Shipping carriers',
                  yaxis_title='Revenue generated')
fig.show()
avg_lead_time = df.groupby('Product type')['Lead time'].mean().reset_index()
avg_manufacturing_costs = df.groupby('Product type')['Manufacturing costs'].mean().reset_index()
result = pd.merge(avg_lead_time, avg_manufacturing_costs,
                  on='Product type')
result.rename(columns={'Lead time': 'Average Manufacturing costs'},
              inplace=True)
print(result)

revenue_chart =px.line(df, x='SKU',
                       y='Revenue generated',
                       title='Revenue generated by SKU')
revenue_chart.show()

stock_chart = px.line(df, x='SKU',
                       y='Stock levels',
                       title='stock levels by SKU')
stock_chart.show()

order_quantity_chart = px.bar(df, x='SKU',
                       y='Order quantities',
                       title='Order quantities by SKU')
order_quantity_chart.show()

shipping_cost_chart = px.bar(df, x='Shipping carriers',
                      y='Shipping cost',
                       title='Shipping cost by carriers')
shipping_cost_chart.show()

transportation_chart = px.pie(df,
                              values='Costs',
                              names='Transportation modes',
                              title='Cost distribution by Transportation modes',
                              hole=0.5,
                              color_discrete_sequence=
                              px.colors.qualitative.pastel)
transportation_chart.show()

pip install textblob
'''
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
linkedin_df = pd.read_csv("D:\\summer-regex\\linkedin-reviews.csv")
linkedin_df.head(10)
sns.set_style("whitegrid")
plt.figure(figsize=(9, 5))

sns.countplot(data=linkedin_df, x="Rating", hue="Rating",
              legend=False, palette="flare")

plt.title("Distribution of Ratings")
plt.xlabel("Rating")
plt.ylabel("Count")
plt.show()
from textblob import TextBlob
def textblob_sentiment_analysis(review):
    sentiment = TextBlob(review).sentiment
    if sentiment.polarity > 0.1:
        return "Positive"
    elif sentiment.polarity < -0.1:
        return "Negative"
    else:
        return "Neutral"
linkedin_df["Sentiment"] = linkedin_df["Review"].apply(
    textblob_sentiment_analysis)
print(linkedin_df.sample())
